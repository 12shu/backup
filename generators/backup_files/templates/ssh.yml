# Backup Configuration file for "SSH (SCP) Backups"
# This file was generated with the Backup Generator
#
# FOR MORE INFORMATION, VIEW THE WIKI ON GITHUB:
#  http://wiki.github.com/meskyanichi/backup
# 
# If you wish to make use of SSH (SCP) to store your
# backups to another server, use this configuration file.
# 
# Step by Step
# 
# Step 1
#  Choose the adapter you would like to use to back up your files
#  (MySQL, SQLite3, Assets or something Custom)
# 
# Step 2
#  Fill in the values for the adapter you choose.
#  You do not need to fill in the values for every adapter,
#  only the ones you are going to use. The rest you can leave untouched or remove.
# 
# Step 3
#  Once you've filled in all values, you are ready to execute the rake task that
#  starts that backup process. Above each Adapter you will see what rake task should
#  be run to start the backup process for that specific Adapter.
#
# Step 4
#  Once set up, you could set these rake tasks up in a cronjob to execute it periodically.
#  For handling this, I recommend using the javan-whenever gem
# 
#  See here: http://github.com/javan/whenever


# Global Options
# 
# - encrypt (optional!)
#
#   What "encrypt" does is encrypt your backup with the given password
#   Example:
#     encrypt: this_is_my_password
#
#   This will encrypt the backup file with the password: this_is_my_password 
#   NOTE: To "decrypt" an encrypted file later on, use the following command:
#     openssl enc -des-cbc -d -in encrypted_file -out decrypted_file 
#
#
# - keep_backups (optional!)
#
#   what "keep_backups" does is it ensures that there won't be more than the specified
#   amount of backups present on the storage location (S3 or any remotely accessible server)
#   Example:
#     keep_backups: 10
#   
#   This will make sure there won't be more than 10 backups on the server at a time.
#   When the 11th backup is pushed to for example Amazon S3, it will delete the oldest
#   backup. Why would you want this? To avoid S3 from being expensive and otherwise
#   to not overload your remote server's harddisk and practically fload it.




# MySQL Adapter
# To run this adapter, execute the following rake task:
# rake backup:ssh:mysql
mysql:
  mysql_config:
    user: root
    password: '' 
    database: foobar
  ssh:
    user: root
    ip: my-domain.com
    path: '/var/backups'
  #encrypt: my_secret_password # Uncomment me if you want this functionality
  #keep_backups: 25 # Uncomment me if you want this functionality
    
    
# SQLite3 Adapter
# To run this adapter, execute the following rake task:
# rake backup:ssh:sqlite3
sqlite3:
  file: production.sqlite3
  path: ':rails_root/db'
  ssh:
    user: root
    ip: my-domain.com
    path: '/var/backups'
  #encrypt: my_secret_password # Uncomment me if you want this functionality
  #keep_backups: 25 # Uncomment me if you want this functionality

# Asset Adapter
# To run this adapter, execute the following rake task:
# rake backup:ssh:assets
assets:
  path: ':rails_root/public/assets'
  ssh:
    user: root
    ip: my-domain.com
    path: '/var/backups'
  #encrypt: my_secret_password # Uncomment me if you want this functionality
  #keep_backups: 25 # Uncomment me if you want this functionality


# Custom Adapter
# To run this adapter, execute the following rake task:
# rake backup:ssh:custom
custom:
  path: ':rails_root/db'
  file:
    - 'foobar1.sql'
    - 'foobar2.sql'
  command:
    - 'mysqldump --quick -u root --password="" foobar > :rails_root/db/foobar1.sql'
    - 'mysqldump --quick -u root --password="" foobar > :rails_root/db/foobar2.sql'
  ssh:
    user: root
    ip: my-domain.com
    path: '/var/backups'
  #encrypt: my_secret_password # Uncomment me if you want this functionality
  #keep_backups: 25 # Uncomment me if you want this functionality