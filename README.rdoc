= Backup

Backup is a gem/plugin that enables you to very easily create backups and transfer these to Amazon S3 or another server with SSH.
It currently supports MySQL, SQLite3 and basic Assets (documents, images, etc) inside a folder. The files will get tar'd / gzip'd and get a timestamp-prefix.
After the backup file has been created, it can be transferred to either Amazon S3 or any remote server through SSH.

== Installation

=== Gem

NOTE: Can't install the GEM version until GitHub Re-Enables it.
Gem has not yet been built! Will build as soon as the service is available!

  gem sources -a http://gems.github.com
  sudo gem install meskyanichi-backup

=== Plugin

  ./script/plugin install git://github.com/meskyanichi/backup.git


== Getting started

Well, this is ridiculously easy to set up! So let's do this.
First install either the gem or plugin.

If you are using the gem version you "must" add the following line to your environment.rb file

==== config/environment.rb
  config.gem "meskyanichi-backup", :lib => "backup", :version => "0.1.0"

Once that's done, run the following command from the "root" of your Rails App

  ./script/generate backup_rake_tasks
  

This will generate two rake tasks and a README inside your "#{RAILS_ROOT}/lib/tasks/backup" folder.
- README.rdoc
- s3.rake
- ssh.rake

Open and read the README.rdoc if you want. It will explain everything very quickly, though, I doubt there is much to explain!
Then (or otherwise) open the "s3.rake" and "ssh.rake" rake task files. These include all the rake tasks/combinations that are (currently!) available.
Above each task inside these files is a description, explaining what you must do, again, "very" straight forward. Stupidly Easy to set up, thankfully!

After you've set up the tasks you wish to utilize (obviously you don't need to use all of them, you can simply just choose to use one of them),
they are all generated so you can basically just fill in the configuration values and be done with it. You obviously don't have to fill in the configuration
for any rake tasks you are not going to use.

That's it! So you have now done two things:
- Configured the Rake Files (just filled in the empty values)
- And at the same time, these are the executable rake tasks you will be using to create a backup

Just run one of the configured rake tasks to perform a backup!


== Requirements

Backup makes use of the "aws-s3" gem to connect to Amazon S3. This is a dependency and will be installed when installing the Backup gem.
If you are using the plugin, you will need to manually install either the gem or plugin from:
http://github.com/marcel/aws-s3

Your production environment, where these backups are running, must be able to use the following utilities:
- tar
- gzip
- ssh (if using ssh)
- scp (if using ssh)
- mysqldump (if using mysql)

Usually these are all installed by default on any Linux flavor. So you will probably be set, assuming you're running Linux or any other UNIX based system.
The Mysqldump utility comes with the Mysql installation. So if you're running MySQL you probably have this as well.


== Suggestions - Periodically Executing Rake Tasks (Backups)

Assuming you will want to run these backups (rake tasks) periodically.
What I currently use to run them is the "javan-whenever" gem. This is very simple, easy to use gem
that generates crontab syntax from your Ruby syntax. To understand what I mean, see the example below!


=== Javan's Whenever Gem Example

With this gem you can basically get periodic backup execution as easy as this:

  every 2.hours do
    rake "backup:s3:sqlite3"
  end

Obviously this will update the crontab to make SQLite3 backups and store them on Amazon S3 every 2 hours.
If you want to do multiple backups, like perhaps backup your MySQL database, along with your assets:

  every 2.hours do
    rake "backup:s3:mysql"
    rake "backup:s3:assets"
  end

So yes, I highly recommend using the javan-whenever gem for this. It's very easy to write and maintain the crontab this way.
For more information on this gem and on how to use it: http://github.com/javan/whenever
Also, Ryan Bates has created a screencast for this gem, see it here: http://railscasts.com/episodes/164-cron-in-ruby
It's awesome, go check it out!


== Resources

So let me sum up the resources

- My Backup Gem (sudo gem install meskyanichi-backup)
- AWS-S3 Gem (sudo gem install aws-s3)
- Whenever Gem (sudo gem install javan-whenever)

==== Notes:
If you are going to use Amazon S3 to store your backups, be sure to install "AWS-S3".
If you want a nice way of managing the crontab and do periodical backups, install "Whenever".
Screencast Whenever Gem by Ryan Bates: http://railscasts.com/episodes/164-cron-in-ruby



== Copyright

Copyright (c) 2009 Michael van Rooijen | Final Creation. See LICENSE for details.