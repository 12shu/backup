h1. Backup

h2. A Backup Ruby Gem for Rails

Backup is a Ruby Gem, written specifically for Ruby on Rails applications. This gem offers a quick and easy way to configure and run backups of your
MySQL/PostgreSQL databases *(and practically even any other database you can dump through the command line)*. It can also make backups of your *archives* (any files or folders).

All backups can be transferred to either *"Amazon S3"* or "any remotely accessible server using the *SCP, SFTP or FTP* transfer methods".

*Backup handles: Compression, Archiving, Encryption and Backup Cleaning.*


h2. What's new in 2.2.0?

*(S)FTP*
FTP and SFTP Storage Methods have been added. This will allow you to transfer your backups
through a (S)FTP if you cannot make use of SCP.

*MySQL*
The following options have been added to the MySQL Adapter

* host
* socket
* port
* skip_tables

*PostgreSQL*
The PostgreSQL Adapter has been added! It has about the same options as the MySQL Adapter

* host/socket
* port
* skip_tables

If you are using PostgreSQL and the Adapter isn't working correctly, please notify me of this.
I personally never used PostgreSQL, so I don't really have any experience with it, but since there are people that do use it, I wanted to implement it.

*Custom*
This adapter will enable you, regardless of your database, to make SQL dumps. It's very simple.
*Simply put: If you don't use MySQL or PostgreSQL then you can use Custom to backup your database format, regardless.*
What the Custom Adapter does is it allows you to input one or more *commands* to execute (think of *mysqldump* or *pg_dump*, but for other databases).

*The benefit of doing this through Backup* is that you will still gain all the other features that it provides, such as Archiving, Compression, Encryption and Backup Cleaning, even though Backup doesn't officially support your specific database format! You can basically see the Custom adapter as any other adapter, except that you have to *write the sql dump command yourself*. And then Backup handles the rest!

*More info on the adapters:*

"http://wiki.github.com/meskyanichi/backup/configuration-file":http://wiki.github.com/meskyanichi/backup/configuration-file

*A few bug fixes*

* Issue where two backup settings would conflict if they were using the same Adapter at the same second! (which can happens when running cronjobs!)
* The temporary files will now be nicely name spaced by "trigger" so no conflict between two different triggers can occur
* When an exception is raised during the backup process, the temporary files would not be removed. This is now fixed.
* And some other minor patches have been applied.

*Updated the Wiki based on this release.*

h3. Get Backup 2.2.x+ now!

bc. sudo gem install backup

And get up and running with Backup 2.2.x+ by reading the *Getting Started* Wiki Page!

"http://wiki.github.com/meskyanichi/backup/getting-started":http://wiki.github.com/meskyanichi/backup/getting-started


h2. (Current) Backup's Capabilities

h3. Storage Methods

* Amazon (S3)
* Remote Server (SCP)
* Remote Server (SFTP)
* Remote Server (FTP)


h3. Adapters

* MySQL
* PostgreSQL
* Archive (any files or folders)
* Custom (any database format other than MySQL or PostgreSQL!)


h3. Archiving

*Backup supports Archiving.*
When you use the Archive adapter to backup a bunch of files and folders, backup will archive and compress these all together.
Archiving also happens when using the *Custom* adapter. If you issue a few commands using it, to dump maybe 1-3 databases, Backup will
handle the archiving, compression and encryption for you!

h3. Encryption

*Backup supports a simple form of encryption.*
All adapters support encryption. This is very simple to enable. Just add the following method inside of the backup settings
of which you wish to encrypt, and it will encrypt it with the specified password:

bc. encrypt_with_password "mypassword"


h3. Backup Cleaning

*Backup supports backup cleaning.*
Backup Cleaning enables you to specify the amount of backups that may be stored on either Amazon S3 or a Remote Server. If you for example tell backup to limit the amount of backups at 20, then when the 21st backup gets pushed to the storage location, the oldest version will automatically be destroyed.

The idea behind this is to not flood either your backup server, which might resort in possible lack of hard disk space. Another good reason to utilize this would be for Amazon. Although Amazon S3 is extremely cheap, when backing up 1-2GB of MySQL dumps twice a day, it can become quite expensive if you never remove old ones.

To enable this you simply call the following method inside the desired "backup setting":

bc. keep_backups 20


h3. Quick Example of a Single Backup Setting inside the Backup Configuration File

bc. backup 'mysql-backup-s3' do
  adapter :mysql do
    user      'user'
    password  'password'
    database  'database'
  end
  storage :s3 do
    access_key_id     'access_key_id'
    secret_access_key 'secret_access_key'
    bucket            '/bucket/backups/mysql/'
    use_ssl           true
  end
  keep_backups 25
  encrypt_with_password 'password'
end
  
  
The (backup 'mysql-backup-s3' do) is what I call a "backup setting". The first argument of the block is the so called "trigger".

bc. backup 'mysql-backup-s3' do
  # Configuration Here
end
  
This acts as an "identifier" for the "backup setting". The (above) "backup setting" is all pretty straightforward.
So now that we've set up a "backup setting", we can run it using a rake task, like so:

bc. rake backup:run trigger="mysql-backup-s3"

*That's it, the MySQL database has been "backed up" to Amazon S3. It has been dumped, compressed and encrypted with password.*
Note: You can add as many "backup setting" blocks as you want inside the "config/backup.rb" configuration file and invoke each of them by their own "trigger". This means you can have as many backup setups as you want, which "don't" all run simultaneously when you initialize a backup.

*Runs the backup setting with the trigger "backup-logs"*

bc. rake backup:run trigger="backup-logs"

*Runs the backup setting with the trigger "backup-mysql"*

bc. rake backup:run trigger="backup-mysql"

*Runs the backup setting with the trigger "backup-assets"*

bc. rake backup:run trigger="backup-assets"

etc. etc. etc. etc. etc. etc...



h2. Interested in trying out Backup?

h3. Check out the following Wiki pages to get up and running:

h3. Getting started

"http://wiki.github.com/meskyanichi/backup/getting-started":http://wiki.github.com/meskyanichi/backup/getting-started


h3. Backup Configuration File (All Adapters, Storage Methods and Options)

"http://wiki.github.com/meskyanichi/backup/configuration-file":http://wiki.github.com/meskyanichi/backup/configuration-file


h3. Rake Tasks

"http://wiki.github.com/meskyanichi/backup/rake-tasks":http://wiki.github.com/meskyanichi/backup/rake-tasks


h3. Automatic Backups

"http://wiki.github.com/meskyanichi/backup/automatic-backups":http://wiki.github.com/meskyanichi/backup/automatic-backups


h3. Capistrano Recipes

"http://wiki.github.com/meskyanichi/backup/capistrano-recipes":http://wiki.github.com/meskyanichi/backup/capistrano-recipes


h3. Capistrano, Whenever!

"http://wiki.github.com/meskyanichi/backup/capistrano-whenever":http://wiki.github.com/meskyanichi/backup/capistrano-whenever


h3. Understanding "The Backup Database"

"http://wiki.github.com/meskyanichi/backup/the-backup-database":http://wiki.github.com/meskyanichi/backup/the-backup-database


h3. Trouble Shooting

"http://wiki.github.com/meskyanichi/backup/troubleshooting":http://wiki.github.com/meskyanichi/backup/troubleshooting


h3. Requirements

"http://wiki.github.com/meskyanichi/backup/requirements":http://wiki.github.com/meskyanichi/backup/requirements


h3. Resources

"http://wiki.github.com/meskyanichi/backup/resources":http://wiki.github.com/meskyanichi/backup/resources


h3. Requests

If anyone has any requests, please send me a message!


h3. Suggestions?

Send me a message! Fork the project!


h3. Found a Bug?

"http://github.com/meskyanichi/backup/issues":http://github.com/meskyanichi/backup/issues


h3. Contributors

List of people that forked and added stuff!

* "dtrueman":http://github.com/dtrueman


h3. Copyright

Copyright (c) 2009 Michael van Rooijen | Final Creation. ("http://final-creation.com":http://final-creation.com) See LICENSE for details.